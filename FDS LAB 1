{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["Installing tabula py for pdf to csv conversion"],"metadata":{"id":"_aFLLpNuEggi"}},{"cell_type":"code","source":["!pip install tabula-py"],"metadata":{"id":"JT6Cq3EiDU06","executionInfo":{"status":"ok","timestamp":1696415265179,"user_tz":-330,"elapsed":7750,"user":{"displayName":"MOULIRAJ .A.K","userId":"16074905108913749991"}},"outputId":"bb05d853-31ba-4525-f69b-b25645ea5198","colab":{"base_uri":"https://localhost:8080/"}},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Collecting tabula-py\n","  Downloading tabula_py-2.8.2-py3-none-any.whl (12.0 MB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m12.0/12.0 MB\u001b[0m \u001b[31m77.5 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hRequirement already satisfied: pandas>=0.25.3 in /usr/local/lib/python3.10/dist-packages (from tabula-py) (1.5.3)\n","Requirement already satisfied: numpy in /usr/local/lib/python3.10/dist-packages (from tabula-py) (1.23.5)\n","Requirement already satisfied: distro in /usr/lib/python3/dist-packages (from tabula-py) (1.7.0)\n","Collecting jpype1 (from tabula-py)\n","  Downloading JPype1-1.4.1-cp310-cp310-manylinux_2_12_x86_64.manylinux2010_x86_64.whl (465 kB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m465.3/465.3 kB\u001b[0m \u001b[31m26.9 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hRequirement already satisfied: python-dateutil>=2.8.1 in /usr/local/lib/python3.10/dist-packages (from pandas>=0.25.3->tabula-py) (2.8.2)\n","Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.10/dist-packages (from pandas>=0.25.3->tabula-py) (2023.3.post1)\n","Requirement already satisfied: packaging in /usr/local/lib/python3.10/dist-packages (from jpype1->tabula-py) (23.1)\n","Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.10/dist-packages (from python-dateutil>=2.8.1->pandas>=0.25.3->tabula-py) (1.16.0)\n","Installing collected packages: jpype1, tabula-py\n","Successfully installed jpype1-1.4.1 tabula-py-2.8.2\n"]}]},{"cell_type":"markdown","source":["To upload pdf file"],"metadata":{"id":"e5fzeWDfEncl"}},{"cell_type":"code","source":["from google.colab import files\n","uploaded = files.upload()"],"metadata":{"id":"QnVxcH92BDq0","colab":{"base_uri":"https://localhost:8080/","height":73},"executionInfo":{"status":"ok","timestamp":1696415251093,"user_tz":-330,"elapsed":11028,"user":{"displayName":"MOULIRAJ .A.K","userId":"16074905108913749991"}},"outputId":"8dfd0314-ef51-43e5-9cb5-49d24cd36ac0"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.HTML object>"],"text/html":["\n","     <input type=\"file\" id=\"files-8a659be2-a780-41bb-9026-94a7d45212aa\" name=\"files[]\" multiple disabled\n","        style=\"border:none\" />\n","     <output id=\"result-8a659be2-a780-41bb-9026-94a7d45212aa\">\n","      Upload widget is only available when the cell has been executed in the\n","      current browser session. Please rerun this cell to enable.\n","      </output>\n","      <script>// Copyright 2017 Google LLC\n","//\n","// Licensed under the Apache License, Version 2.0 (the \"License\");\n","// you may not use this file except in compliance with the License.\n","// You may obtain a copy of the License at\n","//\n","//      http://www.apache.org/licenses/LICENSE-2.0\n","//\n","// Unless required by applicable law or agreed to in writing, software\n","// distributed under the License is distributed on an \"AS IS\" BASIS,\n","// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n","// See the License for the specific language governing permissions and\n","// limitations under the License.\n","\n","/**\n"," * @fileoverview Helpers for google.colab Python module.\n"," */\n","(function(scope) {\n","function span(text, styleAttributes = {}) {\n","  const element = document.createElement('span');\n","  element.textContent = text;\n","  for (const key of Object.keys(styleAttributes)) {\n","    element.style[key] = styleAttributes[key];\n","  }\n","  return element;\n","}\n","\n","// Max number of bytes which will be uploaded at a time.\n","const MAX_PAYLOAD_SIZE = 100 * 1024;\n","\n","function _uploadFiles(inputId, outputId) {\n","  const steps = uploadFilesStep(inputId, outputId);\n","  const outputElement = document.getElementById(outputId);\n","  // Cache steps on the outputElement to make it available for the next call\n","  // to uploadFilesContinue from Python.\n","  outputElement.steps = steps;\n","\n","  return _uploadFilesContinue(outputId);\n","}\n","\n","// This is roughly an async generator (not supported in the browser yet),\n","// where there are multiple asynchronous steps and the Python side is going\n","// to poll for completion of each step.\n","// This uses a Promise to block the python side on completion of each step,\n","// then passes the result of the previous step as the input to the next step.\n","function _uploadFilesContinue(outputId) {\n","  const outputElement = document.getElementById(outputId);\n","  const steps = outputElement.steps;\n","\n","  const next = steps.next(outputElement.lastPromiseValue);\n","  return Promise.resolve(next.value.promise).then((value) => {\n","    // Cache the last promise value to make it available to the next\n","    // step of the generator.\n","    outputElement.lastPromiseValue = value;\n","    return next.value.response;\n","  });\n","}\n","\n","/**\n"," * Generator function which is called between each async step of the upload\n"," * process.\n"," * @param {string} inputId Element ID of the input file picker element.\n"," * @param {string} outputId Element ID of the output display.\n"," * @return {!Iterable<!Object>} Iterable of next steps.\n"," */\n","function* uploadFilesStep(inputId, outputId) {\n","  const inputElement = document.getElementById(inputId);\n","  inputElement.disabled = false;\n","\n","  const outputElement = document.getElementById(outputId);\n","  outputElement.innerHTML = '';\n","\n","  const pickedPromise = new Promise((resolve) => {\n","    inputElement.addEventListener('change', (e) => {\n","      resolve(e.target.files);\n","    });\n","  });\n","\n","  const cancel = document.createElement('button');\n","  inputElement.parentElement.appendChild(cancel);\n","  cancel.textContent = 'Cancel upload';\n","  const cancelPromise = new Promise((resolve) => {\n","    cancel.onclick = () => {\n","      resolve(null);\n","    };\n","  });\n","\n","  // Wait for the user to pick the files.\n","  const files = yield {\n","    promise: Promise.race([pickedPromise, cancelPromise]),\n","    response: {\n","      action: 'starting',\n","    }\n","  };\n","\n","  cancel.remove();\n","\n","  // Disable the input element since further picks are not allowed.\n","  inputElement.disabled = true;\n","\n","  if (!files) {\n","    return {\n","      response: {\n","        action: 'complete',\n","      }\n","    };\n","  }\n","\n","  for (const file of files) {\n","    const li = document.createElement('li');\n","    li.append(span(file.name, {fontWeight: 'bold'}));\n","    li.append(span(\n","        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n","        `last modified: ${\n","            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n","                                    'n/a'} - `));\n","    const percent = span('0% done');\n","    li.appendChild(percent);\n","\n","    outputElement.appendChild(li);\n","\n","    const fileDataPromise = new Promise((resolve) => {\n","      const reader = new FileReader();\n","      reader.onload = (e) => {\n","        resolve(e.target.result);\n","      };\n","      reader.readAsArrayBuffer(file);\n","    });\n","    // Wait for the data to be ready.\n","    let fileData = yield {\n","      promise: fileDataPromise,\n","      response: {\n","        action: 'continue',\n","      }\n","    };\n","\n","    // Use a chunked sending to avoid message size limits. See b/62115660.\n","    let position = 0;\n","    do {\n","      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n","      const chunk = new Uint8Array(fileData, position, length);\n","      position += length;\n","\n","      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n","      yield {\n","        response: {\n","          action: 'append',\n","          file: file.name,\n","          data: base64,\n","        },\n","      };\n","\n","      let percentDone = fileData.byteLength === 0 ?\n","          100 :\n","          Math.round((position / fileData.byteLength) * 100);\n","      percent.textContent = `${percentDone}% done`;\n","\n","    } while (position < fileData.byteLength);\n","  }\n","\n","  // All done.\n","  yield {\n","    response: {\n","      action: 'complete',\n","    }\n","  };\n","}\n","\n","scope.google = scope.google || {};\n","scope.google.colab = scope.google.colab || {};\n","scope.google.colab._files = {\n","  _uploadFiles,\n","  _uploadFilesContinue,\n","};\n","})(self);\n","</script> "]},"metadata":{}},{"output_type":"stream","name":"stdout","text":["Saving Car Dataset.pdf to Car Dataset.pdf\n"]}]},{"cell_type":"markdown","source":["converting Pdf to csv"],"metadata":{"id":"c49WotD3EqM8"}},{"cell_type":"code","source":["# Import the required Module\n","import tabula\n","# convert PDF into CSV\n","tabula.convert_into(\"Car Dataset.pdf\", \"Car Dataset.csv\", output_format=\"csv\", pages='all')"],"metadata":{"id":"W5dA-1-EBGwr"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["Importing required libraries"],"metadata":{"id":"3t4ssfiZE1l1"}},{"cell_type":"code","source":["import pandas as pd\n","import numpy as np\n","from scipy import stats as st\n","import scipy as sp"],"metadata":{"id":"pmD25n0NDfSF"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["Reading CSV file using pandas into Data variable"],"metadata":{"id":"n5n9_Ao8EZk7"}},{"cell_type":"code","source":["Data = pd.read_csv('Car Dataset.csv')\n","print(Data)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"qI1TufEQEEAX","executionInfo":{"status":"ok","timestamp":1696415275240,"user_tz":-330,"elapsed":8,"user":{"displayName":"MOULIRAJ .A.K","userId":"16074905108913749991"}},"outputId":"dd806609-543d-4bd6-ace8-7ba05fcfbfb4"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["           Car       Model  Volume  Weight  Unnamed: 4  CO2\n","0       Toyota        Aygo    1000     790          99  NaN\n","1   Mitsubishi  Space Star    1200    1160          95  NaN\n","2        Skoda      Citigo    1000     929          95  NaN\n","3         Fiat         500     900     865          90  NaN\n","4         Mini      Cooper    1500    1140         105  NaN\n","5           VW         Up!    1000     929         105  NaN\n","6        Skoda       Fabia    1400    1109          90  NaN\n","7     Mercedes     A-Class    1500    1365          92  NaN\n","8         Ford      Fiesta    1500    1112          98  NaN\n","9         Audi          A1    1600    1150          99  NaN\n","10     Hyundai         I20    1100     980          99  NaN\n","11      Suzuki       Swift    1300     990         101  NaN\n","12        Ford      Fiesta    1000    1112          99  NaN\n","13       Honda       Civic    1600    1252          94  NaN\n","14      Hundai         I30    1600    1326          97  NaN\n","15        Opel       Astra    1600    1330          97  NaN\n","16         BMW           1    1600    1365          99  NaN\n","17       Mazda           3    2200    1280         104  NaN\n","18       Skoda       Rapid    1600    1119         104  NaN\n","19        Ford       Focus    2000    1328         105  NaN\n","20        Ford      Mondeo    1600    1584          94  NaN\n","21        Opel    Insignia    2000    1428          99  NaN\n","22    Mercedes     C-Class    2100    1365          99  NaN\n","23       Skoda     Octavia    1600    1415          99  NaN\n","24       Volvo         S60    2000    1415          99  NaN\n","25    Mercedes         CLA    1500    1465         102  NaN\n","26        Audi          A4    2000    1490         104  NaN\n","27        Audi          A6    2000    1725         114  NaN\n","28       Volvo         V70    1600    1523         109  NaN\n","29         BMW           5    2000    1705         114  NaN\n","30    Mercedes     E-Class    2100    1605         115  NaN\n","31       Volvo        XC70    2000    1746         117  NaN\n","32        Ford       B-Max    1600    1235         104  NaN\n","33         BMW           2    1600    1390         108  NaN\n"]}]},{"cell_type":"markdown","source":["Droping the last column C02 cause it as no values"],"metadata":{"id":"5aIAIs5eFs6V"}},{"cell_type":"code","source":["Data.drop(['CO2'],axis=1,inplace=True)\n","print(Data)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"hhRRQRs-FbTc","executionInfo":{"status":"ok","timestamp":1696415277663,"user_tz":-330,"elapsed":4,"user":{"displayName":"MOULIRAJ .A.K","userId":"16074905108913749991"}},"outputId":"e677e2c2-b1b9-4868-8a18-f8c5ed2aea01"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["           Car       Model  Volume  Weight  Unnamed: 4\n","0       Toyota        Aygo    1000     790          99\n","1   Mitsubishi  Space Star    1200    1160          95\n","2        Skoda      Citigo    1000     929          95\n","3         Fiat         500     900     865          90\n","4         Mini      Cooper    1500    1140         105\n","5           VW         Up!    1000     929         105\n","6        Skoda       Fabia    1400    1109          90\n","7     Mercedes     A-Class    1500    1365          92\n","8         Ford      Fiesta    1500    1112          98\n","9         Audi          A1    1600    1150          99\n","10     Hyundai         I20    1100     980          99\n","11      Suzuki       Swift    1300     990         101\n","12        Ford      Fiesta    1000    1112          99\n","13       Honda       Civic    1600    1252          94\n","14      Hundai         I30    1600    1326          97\n","15        Opel       Astra    1600    1330          97\n","16         BMW           1    1600    1365          99\n","17       Mazda           3    2200    1280         104\n","18       Skoda       Rapid    1600    1119         104\n","19        Ford       Focus    2000    1328         105\n","20        Ford      Mondeo    1600    1584          94\n","21        Opel    Insignia    2000    1428          99\n","22    Mercedes     C-Class    2100    1365          99\n","23       Skoda     Octavia    1600    1415          99\n","24       Volvo         S60    2000    1415          99\n","25    Mercedes         CLA    1500    1465         102\n","26        Audi          A4    2000    1490         104\n","27        Audi          A6    2000    1725         114\n","28       Volvo         V70    1600    1523         109\n","29         BMW           5    2000    1705         114\n","30    Mercedes     E-Class    2100    1605         115\n","31       Volvo        XC70    2000    1746         117\n","32        Ford       B-Max    1600    1235         104\n","33         BMW           2    1600    1390         108\n"]}]},{"cell_type":"markdown","source":["Renaming the unamed column to co2"],"metadata":{"id":"fuoZSVRDFzwl"}},{"cell_type":"code","source":["Data.rename({'Unnamed: 4':'CO2'},axis=1,inplace=True)\n","print(Data)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"WEMLpPZ7F6F2","executionInfo":{"status":"ok","timestamp":1696415281729,"user_tz":-330,"elapsed":442,"user":{"displayName":"MOULIRAJ .A.K","userId":"16074905108913749991"}},"outputId":"259ca9a1-ff8e-48a5-e025-e8a907c96c82"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["           Car       Model  Volume  Weight  CO2\n","0       Toyota        Aygo    1000     790   99\n","1   Mitsubishi  Space Star    1200    1160   95\n","2        Skoda      Citigo    1000     929   95\n","3         Fiat         500     900     865   90\n","4         Mini      Cooper    1500    1140  105\n","5           VW         Up!    1000     929  105\n","6        Skoda       Fabia    1400    1109   90\n","7     Mercedes     A-Class    1500    1365   92\n","8         Ford      Fiesta    1500    1112   98\n","9         Audi          A1    1600    1150   99\n","10     Hyundai         I20    1100     980   99\n","11      Suzuki       Swift    1300     990  101\n","12        Ford      Fiesta    1000    1112   99\n","13       Honda       Civic    1600    1252   94\n","14      Hundai         I30    1600    1326   97\n","15        Opel       Astra    1600    1330   97\n","16         BMW           1    1600    1365   99\n","17       Mazda           3    2200    1280  104\n","18       Skoda       Rapid    1600    1119  104\n","19        Ford       Focus    2000    1328  105\n","20        Ford      Mondeo    1600    1584   94\n","21        Opel    Insignia    2000    1428   99\n","22    Mercedes     C-Class    2100    1365   99\n","23       Skoda     Octavia    1600    1415   99\n","24       Volvo         S60    2000    1415   99\n","25    Mercedes         CLA    1500    1465  102\n","26        Audi          A4    2000    1490  104\n","27        Audi          A6    2000    1725  114\n","28       Volvo         V70    1600    1523  109\n","29         BMW           5    2000    1705  114\n","30    Mercedes     E-Class    2100    1605  115\n","31       Volvo        XC70    2000    1746  117\n","32        Ford       B-Max    1600    1235  104\n","33         BMW           2    1600    1390  108\n"]}]},{"cell_type":"markdown","source":["(Mean = Average) Here lets find mean for CO2"],"metadata":{"id":"k1rTuhESE8au"}},{"cell_type":"code","source":["print(np.mean(Data.CO2))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"InZYcmPxE62p","executionInfo":{"status":"ok","timestamp":1696415284308,"user_tz":-330,"elapsed":394,"user":{"displayName":"MOULIRAJ .A.K","userId":"16074905108913749991"}},"outputId":"2ca67c38-5304-49b5-89a5-32cd161b46a6"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["101.29411764705883\n"]}]},{"cell_type":"markdown","source":["(Median = Middle value) Here lets do it for Volume"],"metadata":{"id":"JcIra6ApGtC2"}},{"cell_type":"code","source":["print(np.median(Data.Volume))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"_hNGfMdaGqzw","executionInfo":{"status":"ok","timestamp":1696415285479,"user_tz":-330,"elapsed":5,"user":{"displayName":"MOULIRAJ .A.K","userId":"16074905108913749991"}},"outputId":"96592b75-13b1-4c55-fe4c-a5c218278ec6"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["1600.0\n"]}]},{"cell_type":"markdown","source":["(Mode = most Frequent value) here lets do it for CO2 column"],"metadata":{"id":"HQ6QAEhMHBBz"}},{"cell_type":"code","source":["print(st.mode(Data.CO2))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"JB-XcL_MHNJX","executionInfo":{"status":"ok","timestamp":1696415286391,"user_tz":-330,"elapsed":5,"user":{"displayName":"MOULIRAJ .A.K","userId":"16074905108913749991"}},"outputId":"e071c89f-da8f-49e8-d980-1af1b1ec1762"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["ModeResult(mode=99, count=9)\n"]}]},{"cell_type":"markdown","source":["Corelation gives us the relation between each column lets do it for this file"],"metadata":{"id":"uqRoALHLIGN2"}},{"cell_type":"code","source":["k = Data.corr()\n","print(k)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"8CqoNDuBHu_O","executionInfo":{"status":"ok","timestamp":1696415287544,"user_tz":-330,"elapsed":4,"user":{"displayName":"MOULIRAJ .A.K","userId":"16074905108913749991"}},"outputId":"751e7727-47ec-4a24-a03c-9cd9d70333e1"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["          Volume    Weight       CO2\n","Volume  1.000000  0.792257  0.521577\n","Weight  0.792257  1.000000  0.571550\n","CO2     0.521577  0.571550  1.000000\n"]},{"output_type":"stream","name":"stderr","text":["<ipython-input-13-c0135e07dffc>:1: FutureWarning: The default value of numeric_only in DataFrame.corr is deprecated. In a future version, it will default to False. Select only valid columns or specify the value of numeric_only to silence this warning.\n","  k = Data.corr()\n"]}]},{"cell_type":"code","source":[],"metadata":{"id":"lOrbFnGwH1E1"},"execution_count":null,"outputs":[]}]}